

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
<title>WikiHow Geocode</title>
<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
<style type="text/css">
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  #map_canvas { height: 100% }
</style>
<script type="text/javascript"  src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js"></script>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>

</head>
<body >
    <div ng-app="myApp" ng-controller="myCtrl">
	<div ng-init="initialize()">
		<p>Today's welcome message is:</p>		
		<input type="text" ng-model="channelinput"/>
		<h1>Latitude:{{Latitude}}</h1><h1>Longitude:{{Longitude}}</h1>
		<button ng-click="getChannelInfo()">Submit</button>
        <div id="map_canvas" style="width:900px; height:600px"></div>
        </div>
    </div>
<script type="text/javascript">
  //Declare the variable that will store the geocode object
  
  var app = angular.module('myApp', []);
	app.controller('myCtrl', function($scope, $http) {
	$scope.getChannelInfo=function(){
  debugger;
  $http.get("https://mytestdomain.localtunnel.me/Tasks/"+$scope.channelinput)
  .then(function(response) {
  $scope.response=response;
  $scope.Latitude=$scope.response.data[0].Latitude;
  $scope.Longitude=$scope.response.data[0].Longitude;
  //alert(response);
  $scope.codeAddress();
   // $scope.id = response.data.channel.id;
    //$scope.name = response.data.channel.name;
    //$scope.latitude = response.data.channel.latitude;
    //$scope.longitude = response.data.channel.longitude;
      
      
  });
}
 google_ad_client = "pub-1830327498013415";
                /* 160x600, created 3/8/10 */
                google_ad_slot = "7106425745";
                google_ad_width = 160;
                google_ad_height = 600; 
 var geocoder;
  var map;
  $scope.initialize=function() {
    //Set the geocoder variable equal to an instance of the google maps geocoder object as new google.maps.Geocoder()
    geocoder = new google.maps.Geocoder();
    var latlng = new google.maps.LatLng(42.095287, -79.3185139);
    var myOptions = {
      zoom: 10,
      center: latlng,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    map = new google.maps.Map(document.getElementById("map_canvas"),
        myOptions);
	var iconBase = 'https://maps.google.com/mapfiles/kml/shapes/';
        $scope.icons = {
          parking: {
            icon: iconBase + 'bus.png'
          },
          library: {
            icon: iconBase + 'library_maps.png'
          },
          info: {
            icon: iconBase + 'info-i_maps.png'
          }
        };	
  }
  
  //Add a second function to your javascript code, call it codeAddress.  It will not have any values passed to it.
  $scope.codeAddress=function() {
    //The first line of the function should use getElementById to get the address from the text box and place it
    //into a variable we'll call sAddress.
    //var sAddress = document.getElementById("inputTextAddress").value;
    //Call the geocode method of the geocoder object, this will take two passed in parameters.  The first is 
    //the GeocoderRequest, this says what kind of request is being made and what the request value is.  
    //The second is the callback function that will be used to process the results.
  //  geocoder.geocode( { 'address': sAddress}, function(results, status) {
        //The callback function should first check the status value of the callback function.  Use an IF statement
        //to test the result, check to see if the status equal google.maps.GeocoderStatus.OK.  Also add an 
        //ELSE clause to the if statement as well.
        //if (status == google.maps.GeocoderStatus.OK) {
		if($scope.Latitude && $scope.Longitude){
            //If the status equals OK, call the setCenter method of the map object variable.  You will pass this
            //method the results first geometry location.
            map.setCenter(new google.maps.LatLng(parseFloat($scope.Latitude), parseFloat($scope.Longitude)));
            //Next use the same result geometry location to add a map marker to the map object variable.  Create a new
            //variable, we'll call it oMarker, it will be created as a new google.maps.Marker.  The new method take two
            //parmaters, the first is the map object that you're adding the marker to, and the second is the 
            //position to place the marker which is again the first results geometry location.
            var marker = new google.maps.Marker({
                map: map, 
                position: new google.maps.LatLng(parseFloat($scope.Latitude), parseFloat($scope.Longitude)),
				icon: $scope.icons['parking'].icon,
            });
        } else {
            //Finally we're going to add an alert message to the ELSE to let the user know that the Geocode didn't 
            //work like it should have.  You can use the status to give a bit more information rather than just saying 
            //that it didn't work.
            alert("Geocode was not successful for the following reason: " + status);
        }
     // });
  }
});
</script>	
</body>
</html>
